<!DOCTYPE html>
<html lang="en">
	<head>
		<title>three.js webgl - shaders - ocean - game</title>
		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
		{{!-- <link type="text/css" rel="stylesheet" href="main.css"> --}}
	</head>
	<body>

		<div id="container"></div>
		<div id="info">
			{{!-- <a href="http://threejs.org" target="_blank" rel="noopener">three.js</a> - webgl ocean --}}
		</div>

		<script type="module">

			import * as THREE from '/three.module.js';

			import { GUI } from '/dat.gui.module.js';
			import { OrbitControls } from '/OrbitControls.js';
			import { Water } from '/Water.js';
			import { Sky } from '/Sky.js';

			var container;
			var camera, scene, renderer, light;
			var controls, water, sphere, cloudParticles = [], flash, rain, rainGeo, rainCount = 15000;

			init();
			animate();

			function init() {

				container = document.getElementById( 'container' );

				//

				renderer = new THREE.WebGLRenderer();
				renderer.setPixelRatio( window.devicePixelRatio );
				renderer.setSize( window.innerWidth, window.innerHeight );
				container.appendChild( renderer.domElement );

				//

				scene = new THREE.Scene();

				//

				camera = new THREE.PerspectiveCamera( 55, window.innerWidth / window.innerHeight, 1, 20000 );
				camera.position.set( 30, 30, 100 );

				//

				light = new THREE.DirectionalLight( 0xffffff, 0.8 );
				scene.add( light );

				// Water

				var waterGeometry = new THREE.PlaneBufferGeometry( 10000, 10000 );

                let loader = new THREE.TextureLoader();

				water = new Water(
					waterGeometry,
					{
						textureWidth: 512,
						textureHeight: 512,
						waterNormals: loader.load( 'waternormals.jpg', function ( texture ) {

							texture.wrapS = texture.wrapT = THREE.RepeatWrapping;

						} ),
						alpha: 1.0,
						sunDirection: light.position.clone().normalize(),
						sunColor: 0xffffff,
						waterColor: 0x001e0f,
						distortionScale: 3.7,
						fog: scene.fog !== undefined
					}
				);

				water.rotation.x = - Math.PI / 2;
				scene.add( water );

				// Skybox

				var sky = new Sky();

				var uniforms = sky.material.uniforms;

				uniforms[ 'turbidity' ].value = 10;
				uniforms[ 'rayleigh' ].value = 2;
				uniforms[ 'luminance' ].value = 1;
				uniforms[ 'mieCoefficient' ].value = 0.005;
				uniforms[ 'mieDirectionalG' ].value = 0.8;

				var parameters = {
					distance: 400,
					inclination: 0.49,
					azimuth: 0.205
				};

                //

                flash = new THREE.PointLight(0x062d89, 30, 500, 3);
                flash.position.set(200, 300, 100);
                scene.add(flash);

                let orangeLight = new THREE.PointLight(0xcc6600, 50, 450, 1.7);
                flash.position.set(100, 300, 100);
                scene.add(orangeLight);

                let redLight = new THREE.PointLight(0xd8547e, 50, 500, 1.7);
                flash.position.set(200, 300, 100);
                scene.add(redLight);

                //

                rainGeo = new THREE.Geometry();
                for(let i =0; i < rainCount; i++ ){
                    let rainDrop = new THREE.Vector3(
                        Math.random() * 400 - 200,
                        Math.random() * 500 - 250,
                        Math.random() * 400 - 200
                    );

                    rainDrop.velocity = {};
                    rainDrop.velocity = 0;
                    rainGeo.vertices.push(rainDrop);
                }

                let rainMaterial = new THREE.PointsMaterial({
                    color: 0xaaaaaa,
                    size: 0.1,
                    transparent: true
                })

                rain = new THREE.Points(rainGeo, rainMaterial);
                scene.add(rain)

                //

                let cloudGeo, cloudMaterial;

                let loader_ = new THREE.TextureLoader();
                    loader_.load("smoke.png", function(texture){
                      cloudGeo = new THREE.PlaneBufferGeometry(1500,1500);
                      cloudMaterial = new THREE.MeshLambertMaterial({
                        map: texture,
                        transparent: true
                      });
                      for(let p=0; p < 25; p++) {
                        let cloud = new THREE.Mesh(cloudGeo,cloudMaterial);
                        cloud.position.set(
                          Math.random()* 800 - 400,
                          400,
                          Math.random()* 500 - 450
                        );
                        cloud.rotation.x = 1.16;
                        cloud.rotation.y = -0.12;
                        cloud.rotation.z = Math.random() * 2 * Math.PI;
                        cloud.material.opacity = 0.55;
                        scene.add(cloud);
                      }
                });

                //

				var cubeCamera = new THREE.CubeCamera( 0.1, 1, 512 );
				cubeCamera.renderTarget.texture.generateMipmaps = true;
				cubeCamera.renderTarget.texture.minFilter = THREE.LinearMipmapLinearFilter;
                scene.fog = new THREE.FogExp2(0x11111f, 0.002);
                
                renderer.setClearColor(scene.fog.color);


                let ambient = new THREE.AmbientLight(0x555555);
                scene.add(ambient);

				scene.background = cubeCamera.renderTarget;

				function updateSun() {

					var theta = Math.PI * ( parameters.inclination - 0.5 );
					var phi = 2 * Math.PI * ( parameters.azimuth - 0.5 );

					light.position.x = parameters.distance * Math.cos( phi );
					light.position.y = parameters.distance * Math.sin( phi ) * Math.sin( theta );
					light.position.z = parameters.distance * Math.sin( phi ) * Math.cos( theta );

					sky.material.uniforms[ 'sunPosition' ].value = light.position.copy( light.position );
					water.material.uniforms[ 'sunDirection' ].value.copy( light.position ).normalize();

					cubeCamera.update( renderer, sky );

				}

				updateSun();

				//

				var geometry = new THREE.IcosahedronBufferGeometry( 20, 1 );
				var count = geometry.attributes.position.count;

				var colors = [];
				var color = new THREE.Color();

				for ( var i = 0; i < count; i += 3 ) {

					color.setHex( Math.random() * 0xffffff );

					colors.push( color.r, color.g, color.b );
					colors.push( color.r, color.g, color.b );
					colors.push( color.r, color.g, color.b );

				}

				geometry.addAttribute( 'color', new THREE.Float32BufferAttribute( colors, 3 ) );

				var material = new THREE.MeshStandardMaterial( {
					vertexColors: THREE.VertexColors,
					roughness: 0.0,
					flatShading: true,
					envMap: cubeCamera.renderTarget.texture,
					side: THREE.DoubleSide
				} );

				sphere = new THREE.Mesh( geometry, material );
				{{!-- scene.add( sphere ); --}}

				//

				controls = new OrbitControls( camera, renderer.domElement );
				//controls.maxPolarAngle = Math.PI * 0.495;
				controls.target.set( 0, 10, 0 );
				controls.minDistance = 40.0;
				controls.maxDistance = 200.0;
				controls.update();

				// GUI

				var gui = new GUI();

				var folder = gui.addFolder( 'Sky' );
				folder.add( parameters, 'inclination', 0, 0.5, 0.0001 ).onChange( updateSun );
				folder.add( parameters, 'azimuth', 0, 1, 0.0001 ).onChange( updateSun );
				folder.open();

				var uniforms = water.material.uniforms;

				var folder = gui.addFolder( 'Water' );
				folder.add( uniforms.distortionScale, 'value', 0, 8, 0.1 ).name( 'distortionScale' );
				folder.add( uniforms.size, 'value', 0.1, 10, 0.1 ).name( 'size' );
				folder.add( uniforms.alpha, 'value', 0.9, 1, .001 ).name( 'alpha' );
				folder.open();

				//

				window.addEventListener( 'resize', onWindowResize, false );

			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			function animate() {
                
				requestAnimationFrame( animate );
				render();

			}

			function render() {

				var time = performance.now() * 0.001;

				sphere.position.y = Math.sin( time ) * 20 + 5;
				sphere.rotation.x = time * 0.5;
				sphere.rotation.z = time * 0.51;

				water.material.uniforms[ 'time' ].value += 1.0 / 60.0;

                cloudParticles.forEach(item => {
                    item.rotation.z -= 0.002;
                });

                rainGeo.vertices.forEach(p => {
                    p.velocity -= 0.1 + Math.random() * 0.1;
                    p.y += p.velocity;
                    if( p.y < -200 ) {
                        p.y = 200;
                        p.velocity = 0;
                    }
                });

                rainGeo.verticesNeedUpdate = true;


                if(Math.random() > 0.93 || flash.power > 100) {
                    if(flash.powe < 100) flash.position.set(Math.random() * 400, 300 + Math.random() * 500, 100);
                    flash.power = 50 + Math.random() * 500;
                };

				renderer.render( scene, camera );

			}

		</script>
	</body>
</html>
